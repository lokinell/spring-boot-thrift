/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.tungsten;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-20")
public class TTungstenAlphaService {

  public interface Iface {

    public int resistance(TCircuit circuit, int r1, int r2) throws TIllegalResistorValueException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void resistance(TCircuit circuit, int r1, int r2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int resistance(TCircuit circuit, int r1, int r2) throws TIllegalResistorValueException, org.apache.thrift.TException
    {
      send_resistance(circuit, r1, r2);
      return recv_resistance();
    }

    public void send_resistance(TCircuit circuit, int r1, int r2) throws org.apache.thrift.TException
    {
      resistance_args args = new resistance_args();
      args.setCircuit(circuit);
      args.setR1(r1);
      args.setR2(r2);
      sendBase("resistance", args);
    }

    public int recv_resistance() throws TIllegalResistorValueException, org.apache.thrift.TException
    {
      resistance_result result = new resistance_result();
      receiveBase(result, "resistance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.illegalResistorValue != null) {
        throw result.illegalResistorValue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resistance failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void resistance(TCircuit circuit, int r1, int r2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resistance_call method_call = new resistance_call(circuit, r1, r2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resistance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCircuit circuit;
      private int r1;
      private int r2;
      public resistance_call(TCircuit circuit, int r1, int r2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.circuit = circuit;
        this.r1 = r1;
        this.r2 = r2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resistance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resistance_args args = new resistance_args();
        args.setCircuit(circuit);
        args.setR1(r1);
        args.setR2(r2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TIllegalResistorValueException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resistance();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("resistance", new resistance());
      return processMap;
    }

    public static class resistance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resistance_args> {
      public resistance() {
        super("resistance");
      }

      public resistance_args getEmptyArgsInstance() {
        return new resistance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resistance_result getResult(I iface, resistance_args args) throws org.apache.thrift.TException {
        resistance_result result = new resistance_result();
        try {
          result.success = iface.resistance(args.circuit, args.r1, args.r2);
          result.setSuccessIsSet(true);
        } catch (TIllegalResistorValueException illegalResistorValue) {
          result.illegalResistorValue = illegalResistorValue;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("resistance", new resistance());
      return processMap;
    }

    public static class resistance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resistance_args, Integer> {
      public resistance() {
        super("resistance");
      }

      public resistance_args getEmptyArgsInstance() {
        return new resistance_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            resistance_result result = new resistance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resistance_result result = new resistance_result();
            if (e instanceof TIllegalResistorValueException) {
                        result.illegalResistorValue = (TIllegalResistorValueException) e;
                        result.setIllegalResistorValueIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resistance_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.resistance(args.circuit, args.r1, args.r2,resultHandler);
      }
    }

  }

  public static class resistance_args implements org.apache.thrift.TBase<resistance_args, resistance_args._Fields>, java.io.Serializable, Cloneable, Comparable<resistance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resistance_args");

    private static final org.apache.thrift.protocol.TField CIRCUIT_FIELD_DESC = new org.apache.thrift.protocol.TField("circuit", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField R1_FIELD_DESC = new org.apache.thrift.protocol.TField("r1", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField R2_FIELD_DESC = new org.apache.thrift.protocol.TField("r2", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resistance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resistance_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see TCircuit
     */
    public TCircuit circuit; // required
    public int r1; // required
    public int r2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TCircuit
       */
      CIRCUIT((short)1, "circuit"),
      R1((short)2, "r1"),
      R2((short)3, "r2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CIRCUIT
            return CIRCUIT;
          case 2: // R1
            return R1;
          case 3: // R2
            return R2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __R1_ISSET_ID = 0;
    private static final int __R2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CIRCUIT, new org.apache.thrift.meta_data.FieldMetaData("circuit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCircuit.class)));
      tmpMap.put(_Fields.R1, new org.apache.thrift.meta_data.FieldMetaData("r1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.R2, new org.apache.thrift.meta_data.FieldMetaData("r2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resistance_args.class, metaDataMap);
    }

    public resistance_args() {
    }

    public resistance_args(
      TCircuit circuit,
      int r1,
      int r2)
    {
      this();
      this.circuit = circuit;
      this.r1 = r1;
      setR1IsSet(true);
      this.r2 = r2;
      setR2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resistance_args(resistance_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCircuit()) {
        this.circuit = other.circuit;
      }
      this.r1 = other.r1;
      this.r2 = other.r2;
    }

    public resistance_args deepCopy() {
      return new resistance_args(this);
    }

    @Override
    public void clear() {
      this.circuit = null;
      setR1IsSet(false);
      this.r1 = 0;
      setR2IsSet(false);
      this.r2 = 0;
    }

    /**
     * 
     * @see TCircuit
     */
    public TCircuit getCircuit() {
      return this.circuit;
    }

    /**
     * 
     * @see TCircuit
     */
    public resistance_args setCircuit(TCircuit circuit) {
      this.circuit = circuit;
      return this;
    }

    public void unsetCircuit() {
      this.circuit = null;
    }

    /** Returns true if field circuit is set (has been assigned a value) and false otherwise */
    public boolean isSetCircuit() {
      return this.circuit != null;
    }

    public void setCircuitIsSet(boolean value) {
      if (!value) {
        this.circuit = null;
      }
    }

    public int getR1() {
      return this.r1;
    }

    public resistance_args setR1(int r1) {
      this.r1 = r1;
      setR1IsSet(true);
      return this;
    }

    public void unsetR1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __R1_ISSET_ID);
    }

    /** Returns true if field r1 is set (has been assigned a value) and false otherwise */
    public boolean isSetR1() {
      return EncodingUtils.testBit(__isset_bitfield, __R1_ISSET_ID);
    }

    public void setR1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __R1_ISSET_ID, value);
    }

    public int getR2() {
      return this.r2;
    }

    public resistance_args setR2(int r2) {
      this.r2 = r2;
      setR2IsSet(true);
      return this;
    }

    public void unsetR2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __R2_ISSET_ID);
    }

    /** Returns true if field r2 is set (has been assigned a value) and false otherwise */
    public boolean isSetR2() {
      return EncodingUtils.testBit(__isset_bitfield, __R2_ISSET_ID);
    }

    public void setR2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __R2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CIRCUIT:
        if (value == null) {
          unsetCircuit();
        } else {
          setCircuit((TCircuit)value);
        }
        break;

      case R1:
        if (value == null) {
          unsetR1();
        } else {
          setR1((Integer)value);
        }
        break;

      case R2:
        if (value == null) {
          unsetR2();
        } else {
          setR2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CIRCUIT:
        return getCircuit();

      case R1:
        return Integer.valueOf(getR1());

      case R2:
        return Integer.valueOf(getR2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CIRCUIT:
        return isSetCircuit();
      case R1:
        return isSetR1();
      case R2:
        return isSetR2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resistance_args)
        return this.equals((resistance_args)that);
      return false;
    }

    public boolean equals(resistance_args that) {
      if (that == null)
        return false;

      boolean this_present_circuit = true && this.isSetCircuit();
      boolean that_present_circuit = true && that.isSetCircuit();
      if (this_present_circuit || that_present_circuit) {
        if (!(this_present_circuit && that_present_circuit))
          return false;
        if (!this.circuit.equals(that.circuit))
          return false;
      }

      boolean this_present_r1 = true;
      boolean that_present_r1 = true;
      if (this_present_r1 || that_present_r1) {
        if (!(this_present_r1 && that_present_r1))
          return false;
        if (this.r1 != that.r1)
          return false;
      }

      boolean this_present_r2 = true;
      boolean that_present_r2 = true;
      if (this_present_r2 || that_present_r2) {
        if (!(this_present_r2 && that_present_r2))
          return false;
        if (this.r2 != that.r2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_circuit = true && (isSetCircuit());
      list.add(present_circuit);
      if (present_circuit)
        list.add(circuit.getValue());

      boolean present_r1 = true;
      list.add(present_r1);
      if (present_r1)
        list.add(r1);

      boolean present_r2 = true;
      list.add(present_r2);
      if (present_r2)
        list.add(r2);

      return list.hashCode();
    }

    @Override
    public int compareTo(resistance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCircuit()).compareTo(other.isSetCircuit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCircuit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circuit, other.circuit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetR1()).compareTo(other.isSetR1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetR1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.r1, other.r1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetR2()).compareTo(other.isSetR2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetR2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.r2, other.r2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resistance_args(");
      boolean first = true;

      sb.append("circuit:");
      if (this.circuit == null) {
        sb.append("null");
      } else {
        sb.append(this.circuit);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("r1:");
      sb.append(this.r1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("r2:");
      sb.append(this.r2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resistance_argsStandardSchemeFactory implements SchemeFactory {
      public resistance_argsStandardScheme getScheme() {
        return new resistance_argsStandardScheme();
      }
    }

    private static class resistance_argsStandardScheme extends StandardScheme<resistance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resistance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CIRCUIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.circuit = com.example.tungsten.TCircuit.findByValue(iprot.readI32());
                struct.setCircuitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // R1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.r1 = iprot.readI32();
                struct.setR1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // R2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.r2 = iprot.readI32();
                struct.setR2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resistance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.circuit != null) {
          oprot.writeFieldBegin(CIRCUIT_FIELD_DESC);
          oprot.writeI32(struct.circuit.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(R1_FIELD_DESC);
        oprot.writeI32(struct.r1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(R2_FIELD_DESC);
        oprot.writeI32(struct.r2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resistance_argsTupleSchemeFactory implements SchemeFactory {
      public resistance_argsTupleScheme getScheme() {
        return new resistance_argsTupleScheme();
      }
    }

    private static class resistance_argsTupleScheme extends TupleScheme<resistance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resistance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCircuit()) {
          optionals.set(0);
        }
        if (struct.isSetR1()) {
          optionals.set(1);
        }
        if (struct.isSetR2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCircuit()) {
          oprot.writeI32(struct.circuit.getValue());
        }
        if (struct.isSetR1()) {
          oprot.writeI32(struct.r1);
        }
        if (struct.isSetR2()) {
          oprot.writeI32(struct.r2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resistance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.circuit = com.example.tungsten.TCircuit.findByValue(iprot.readI32());
          struct.setCircuitIsSet(true);
        }
        if (incoming.get(1)) {
          struct.r1 = iprot.readI32();
          struct.setR1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.r2 = iprot.readI32();
          struct.setR2IsSet(true);
        }
      }
    }

  }

  public static class resistance_result implements org.apache.thrift.TBase<resistance_result, resistance_result._Fields>, java.io.Serializable, Cloneable, Comparable<resistance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resistance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ILLEGAL_RESISTOR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("illegalResistorValue", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resistance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resistance_resultTupleSchemeFactory());
    }

    public int success; // required
    public TIllegalResistorValueException illegalResistorValue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ILLEGAL_RESISTOR_VALUE((short)1, "illegalResistorValue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ILLEGAL_RESISTOR_VALUE
            return ILLEGAL_RESISTOR_VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ILLEGAL_RESISTOR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("illegalResistorValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resistance_result.class, metaDataMap);
    }

    public resistance_result() {
    }

    public resistance_result(
      int success,
      TIllegalResistorValueException illegalResistorValue)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.illegalResistorValue = illegalResistorValue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resistance_result(resistance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIllegalResistorValue()) {
        this.illegalResistorValue = new TIllegalResistorValueException(other.illegalResistorValue);
      }
    }

    public resistance_result deepCopy() {
      return new resistance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.illegalResistorValue = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public resistance_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TIllegalResistorValueException getIllegalResistorValue() {
      return this.illegalResistorValue;
    }

    public resistance_result setIllegalResistorValue(TIllegalResistorValueException illegalResistorValue) {
      this.illegalResistorValue = illegalResistorValue;
      return this;
    }

    public void unsetIllegalResistorValue() {
      this.illegalResistorValue = null;
    }

    /** Returns true if field illegalResistorValue is set (has been assigned a value) and false otherwise */
    public boolean isSetIllegalResistorValue() {
      return this.illegalResistorValue != null;
    }

    public void setIllegalResistorValueIsSet(boolean value) {
      if (!value) {
        this.illegalResistorValue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case ILLEGAL_RESISTOR_VALUE:
        if (value == null) {
          unsetIllegalResistorValue();
        } else {
          setIllegalResistorValue((TIllegalResistorValueException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case ILLEGAL_RESISTOR_VALUE:
        return getIllegalResistorValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ILLEGAL_RESISTOR_VALUE:
        return isSetIllegalResistorValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resistance_result)
        return this.equals((resistance_result)that);
      return false;
    }

    public boolean equals(resistance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_illegalResistorValue = true && this.isSetIllegalResistorValue();
      boolean that_present_illegalResistorValue = true && that.isSetIllegalResistorValue();
      if (this_present_illegalResistorValue || that_present_illegalResistorValue) {
        if (!(this_present_illegalResistorValue && that_present_illegalResistorValue))
          return false;
        if (!this.illegalResistorValue.equals(that.illegalResistorValue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_illegalResistorValue = true && (isSetIllegalResistorValue());
      list.add(present_illegalResistorValue);
      if (present_illegalResistorValue)
        list.add(illegalResistorValue);

      return list.hashCode();
    }

    @Override
    public int compareTo(resistance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIllegalResistorValue()).compareTo(other.isSetIllegalResistorValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIllegalResistorValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.illegalResistorValue, other.illegalResistorValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resistance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("illegalResistorValue:");
      if (this.illegalResistorValue == null) {
        sb.append("null");
      } else {
        sb.append(this.illegalResistorValue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resistance_resultStandardSchemeFactory implements SchemeFactory {
      public resistance_resultStandardScheme getScheme() {
        return new resistance_resultStandardScheme();
      }
    }

    private static class resistance_resultStandardScheme extends StandardScheme<resistance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resistance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ILLEGAL_RESISTOR_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.illegalResistorValue = new TIllegalResistorValueException();
                struct.illegalResistorValue.read(iprot);
                struct.setIllegalResistorValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resistance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.illegalResistorValue != null) {
          oprot.writeFieldBegin(ILLEGAL_RESISTOR_VALUE_FIELD_DESC);
          struct.illegalResistorValue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resistance_resultTupleSchemeFactory implements SchemeFactory {
      public resistance_resultTupleScheme getScheme() {
        return new resistance_resultTupleScheme();
      }
    }

    private static class resistance_resultTupleScheme extends TupleScheme<resistance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resistance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIllegalResistorValue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIllegalResistorValue()) {
          struct.illegalResistorValue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resistance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.illegalResistorValue = new TIllegalResistorValueException();
          struct.illegalResistorValue.read(iprot);
          struct.setIllegalResistorValueIsSet(true);
        }
      }
    }

  }

}
